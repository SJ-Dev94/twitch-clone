{"ast":null,"code":"import _regeneratorRuntime from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM } from './types';\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return streams.post('/streams', formValues);\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/seth/projects/twitchclone/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","post","response","data"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SAAQC,OAAR,EAAiBC,QAAjB,EAA2BC,aAA3B,QAA+C,SAA/C;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEL,OADD;AAELM,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAgB;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiBX,OAAO,CAACY,IAAR,CAAa,UAAb,EAAyBF,UAAzB,CADjB;;AAAA;AACAG,gBAAAA,QADA;AAGNF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEH,aAAP;AAAsBI,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAAxC,iBAAD,CAAR;;AAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKD,CANM","sourcesContent":["import streams from '../apis/streams';\nimport {SIGN_IN, SIGN_OUT, CREATE_STREAM} from './types'\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  }\n}\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  }\n}\n\nexport const createStream = (formValues) => {\n  return async (dispatch) => {\n   const response = await streams.post('/streams', formValues);\n\n   dispatch({type: CREATE_STREAM, payload: response.data})\n  }\n}"]},"metadata":{},"sourceType":"module"}