{"ast":null,"code":"import _classCallCheck from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/seth/projects/twitchclone/client/src/components/streams/StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nvar StreamEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamEdit, _React$Component);\n\n  function StreamEdit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamEdit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamEdit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (formValues) {};\n\n    return _this;\n  }\n\n  _createClass(StreamEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchStream(this.props.match.params.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, this.props.stream.title);\n    }\n  }]);\n\n  return StreamEdit;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamEdit);","map":{"version":3,"sources":["/Users/seth/projects/twitchclone/client/src/components/streams/StreamEdit.js"],"names":["React","connect","fetchStream","editStream","StreamForm","StreamEdit","onSubmit","formValues","props","match","params","id","console","log","stream","title","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAEMC,U;;;;;;;;;;;;;;;;;;UAKJC,Q,GAAW,UAACC,UAAD,EAAgB,CAE1B,C;;;;;;;wCANkB;AACnB,WAAKC,KAAL,CAAWN,WAAX,CAAuB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACC;;;6BAMQ;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;;AACA,UAAG,CAAC,KAAKA,KAAL,CAAWM,MAAf,EAAsB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAED,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKN,KAAL,CAAWM,MAAX,CAAkBC,KAAxB,CAAP;AACD;;;;EAhBsBf,KAAK,CAACgB,S;;AAmB/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AAACL,IAAAA,MAAM,EAAEI,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACV,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAT,GAAP;AACD,CAFD;;AAGA,eAAeV,OAAO,CAACgB,eAAD,EAAkB;AAAEf,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CG,UAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux'\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nclass StreamEdit extends React.Component {\n  componentDidMount(){\n  this.props.fetchStream(this.props.match.params.id);\n  }\n\n  onSubmit = (formValues) => {\n\n  }\n  \n  render() { \n    console.log(this.props)\n    if(!this.props.stream){\n      return <div>Loading...</div>\n    }\n    \n    return <div>{this.props.stream.title}</div>;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {stream: state.streams[ownProps.match.params.id] }\n}\nexport default connect(mapStateToProps, { fetchStream })(StreamEdit);\n"]},"metadata":{},"sourceType":"module"}