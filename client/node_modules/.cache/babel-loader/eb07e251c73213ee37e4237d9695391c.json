{"ast":null,"code":"import _classCallCheck from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/seth/projects/twitchclone/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/seth/projects/twitchclone/client/src/components/streams/StreamShow.js\";\nimport React from \"react\";\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.player.destroy();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \" \", this.props.stream.title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"          \", this.props.stream.description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/seth/projects/twitchclone/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","width","title","description","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AAEJ,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,oFAAMA,KAAN;AACA,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAFgB;AAGjB;;;;wCAEkB;AAAA,UACVC,EADU,GACJ,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADb,CACVF,EADU;AAGjB,WAAKH,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACA,WAAKG,WAAL;AACD;;;yCAEoB;AACnB,WAAKA,WAAL;AACD;;;2CAEqB;AACpB,WAAKC,MAAL,CAAYC,OAAZ;AACD;;;kCAEa;AACZ,UAAI,KAAKD,MAAL,IAAe,CAAC,KAAKP,KAAL,CAAWS,MAA/B,EAAuC;AACrC;AACD;;AAHW,UAKJN,EALI,GAKG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MALpB,CAKJF,EALI;AAMZ,WAAKI,MAAL,GAAcX,GAAG,CAACc,YAAJ,CAAiB;AAC7BC,QAAAA,IAAI,EAAE,KADuB;AAE7BC,QAAAA,GAAG,uCAAgCT,EAAhC;AAF0B,OAAjB,CAAd;AAIA,WAAKI,MAAL,CAAYM,kBAAZ,CAA+B,KAAKZ,QAAL,CAAca,OAA7C;AACA,WAAKP,MAAL,CAAYQ,IAAZ;AACD;;;6BAEO;AACN,UAAI,CAAC,KAAKf,KAAL,CAAWS,MAAhB,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,GAAG,EAAE,KAAKR,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAACe,UAAAA,KAAK,EAAE;AAAR,SAAlC;AAAmD,QAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,KAAKhB,KAAL,CAAWS,MAAX,CAAkBQ,KAAxB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe,KAAKjB,KAAL,CAAWS,MAAX,CAAkBS,WAAjC,CAHF,CADF;AAQD;;;;EA/CHvB,KAAK,CAACwB,S;;AAkDN,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeN,OAAO,CAACuB,eAAD,EAAkB;AAACtB,EAAAA,WAAW,EAAXA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from \"react\";\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends \nReact.Component {\n  constructor(props){\n    super(props);\n    this.videoRef = React.createRef();\n  }\n  \n  componentDidMount(){\n    const {id} = this.props.match.params\n    \n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount(){\n    this.player.destroy();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const { id } = this.props.match.params\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    })\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render(){\n    if (!this.props.stream){\n      return <div>Loading...</div>\n    }\n    return (\n      <div>\n        <video ref={this.videoRef} style={{width: '100%'}} controls={true} />\n        <h1> {this.props.stream.title}</h1>\n        <h5>          {this.props.stream.description}\n        </h5>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id]}\n}\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);"]},"metadata":{},"sourceType":"module"}